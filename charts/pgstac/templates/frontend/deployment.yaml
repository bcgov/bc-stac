{{- if .Values.frontend.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "frontend.fullname" . }}
  labels:
    {{- include "frontend.labels" . | nindent 4 }}
spec:
  strategy:
    type: {{ .Values.frontend.deploymentStrategy }}
  {{- if not .Values.frontend.autoscaling.enabled }}
  replicas: {{ .Values.frontend.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "frontend.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        rollme: {{ randAlphaNum 5 | quote }}
        prometheus.io/scrape: 'true'
        prometheus.io/port: '3000'
        prometheus.io/path: '/api/metrics'
      labels:
        {{- include "frontend.labels" . | nindent 8 }}
    spec:
      {{- if .Values.frontend.podSecurityContext }}
      securityContext:
        {{- toYaml .Values.frontend.podSecurityContext | nindent 12 }}
      {{- end }}
      containers:
        - name: {{ include "frontend.fullname" . }}
          {{- if .Values.frontend.securityContext }}
          securityContext:
            {{- toYaml .Values.frontend.securityContext | nindent 12 }}
          {{- end }}
          image: "{{.Values.frontend.image.registry}}/{{.Values.frontend.image.repository}}:{{.Values.frontend.image.tag}}"
          imagePullPolicy: {{ .Values.frontend.imagePullPolicy }}
          envFrom:
            {{- if .Values.frontend.configMap.enabled }}
            - configMapRef:
                name: {{ .Release.Name }}-config
            {{- end }}
          env:
            - name: BACKEND_URL
              value: "http://{{ .Release.Name }}-backend"
            - name: LOG_LEVEL
              value: "info"
          ports:
            {{- range .Values.frontend.service.ports }}
            - name: {{ .name | default (printf "port-%d" .port) }}
              containerPort: {{ .targetPort }}
              protocol: {{ .protocol | default "TCP" }}
            {{- end }}
          volumeMounts:
            - name: data
              mountPath: /data
            - name: config
              mountPath: /config
          # readinessProbe:
          #   httpGet:
          #     path: /health
          #     port: http
          #     scheme: HTTP
          #   initialDelaySeconds: 5
          #   periodSeconds: 2
          #   timeoutSeconds: 2
          #   successThreshold: 1
          #   failureThreshold: 30
          # livenessProbe:
          #   successThreshold: 1
          #   failureThreshold: 3
          #   httpGet:
          #     path: /health
          #     port: 3001
          #     scheme: HTTP
          #   initialDelaySeconds: 15
          #   periodSeconds: 30
          #   timeoutSeconds: 5

      {{- with .Values.frontend.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.frontend.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
        - name: data
          emptyDir: {}
        - name: config
          emptyDir: {}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app.kubernetes.io/name
                    operator: In
                    values:
                      - {{ include "frontend.fullname" . }}
                  - key: app.kubernetes.io/instance
                    operator: In
                    values:
                      - {{ .Release.Name }}
              topologyKey: "kubernetes.io/hostname"

{{- end }}